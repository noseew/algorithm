package org.song.algorithm.algorithmbase._01datatype._01base._04tree._01model;

/*
B树
(平衡树, 包括2叉树和多叉树)
m阶B树
    根节点(1 <= x <= m-1)
    非根节点(floor(m/2) - 1 <= x <= m-1), 
        最小有限制, 也就是如果子节点少, 父节点多, 父节点要退化成子节点, 
            如果出现子节点上溢到父节点然后父节点下溢到另一个子节点, 那么这个组合操作就相当于旋转
            如果上溢到达根节点, 且根节点数量也达到了最大, 则B数高度会增加, 且只有这种方式能让B树增高
            如果根节点不够下溢, 则将根节点下溢, B树的高度减少, 且只有这种方式能让B树降低
        最多有限制, m-1
m=2, 每个节点最多1个值, 最多2个子节点, 也就是普通二叉树
m=3, 每个节点最多2个值, 最多3个子节点, 就是23树
m=4, 每个节点最多3个值, 最多4个子节点, 就是234树, 简称24树
m=5, 就是35树

B树特点
1. 平衡, 高度相同
2. 一个节点存储的多个值, 可以用数组也可以用链表
3. 新添加的元素必须添加到叶子结点

应用:
文件索引
数据库中采用的就是B树或者B树的变种, 比如B+树, 阶数能达到几百甚至几千阶
 */
public class Tree04_B_base<V extends Comparable<V>> {
}
