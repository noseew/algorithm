package org.song.algorithm.base._01datatype._01base._01linear.bit._01base;

import org.junit.jupiter.api.Test;
import org.song.algorithm.base.utils.BinaryUtils;

public class BinaryBase_01_start {
    
    /*
    32bit: 0000000_00000000_00000000_00000000
    64bit: 0000000_00000000_00000000_00000000 0000000_00000000_00000000_00000000
    
    1byte(字节): 
        0000000 (二进制展示)
        ff (16进制展示)
        (8进制展示并不直观, 所以不建议使用)
     */
    
    /**
     * 二进制
     */
    @Test
    public void binary_01_base() {
        int i = 0;
        // 声明
        i = 0b10;// s声明二进制, 0b开头
        i = 0B10;
        i = 0B1000_0000;
        // int 最大32位, 
        i = 0B10000000_00000000_00000000_00000000;
//        i = 0B10000000_00000000_00000000_000000000; // 超过32位会报错


        // 最多能表示 2^32次方 个数, 约40亿, 其中正数21亿, 负数21亿
        // 正数0开头, 最大值 21亿
        i = 0B01111111_11111111_11111111_11111111;
        // 负数1开头, 最大值 -1
        i = 0B11111111_11111111_11111111_11111111;
        // 正数负数关系, 一个数的取反+1正好是这个数的相反数


        // 常用特殊值
        // 二进制最大值, +2147483647
        i = 0B01111111_11111111_11111111_11111111;
        // 二进制 -2147483648, 正值最大值+1
        i = 0B10000000_00000000_00000000_00000000;
        // 二进制, 0
        i = 0B00000000_00000000_00000000_00000000;
        // 二进制, 1
        i = 0B00000000_00000000_00000000_00000001;
        // 二进制, 1431655765
        i = 0B01010101_01010101_01010101_01010101;
        // 二进制, -1431655766
        i = 0B10101010_10101010_10101010_10101010;
        // 二进制, 858993459
        i = 0B00110011_00110011_00110011_00110011;
        // 二进制, -858993460
        i = 0B11001100_11001100_11001100_11001100;
        // 二进制, 252645135
        i = 0B00001111_00001111_00001111_00001111;
        // 二进制, -252645136
        i = 0B11110000_11110000_11110000_11110000;
        // 二进制, 65535
        i = 0B00000000_00000000_11111111_11111111;
        // 二进制, -65536
        i = 0B11111111_11111111_00000000_00000000;

        // 二进制打印输出
        Integer.toBinaryString(1);
        Long.toBinaryString(1L);
        BinaryUtils.binaryPretty(1);
    }

    /**
     * 十六进制
     */
    @Test
    public void hex_01_base() {
        int i = 0;

        i = 0xf; // 定义十六进制 使用0x开头
        i = 0Xf000_ffff;
        i = 0B10;
        i = 0B1000_0000;
        // int 最大32位 的表示, 一个16进制位表示4个二进制位, 2进制范围0-1, 16进制范围0-f
        i = 0Xffff_ffff;


        // 最多能表示 2^32次方 个数, 约40亿, 其中正数21亿, 负数21亿
        // 正数0开头, 最大值 21亿
        i = 0x7fff_ffff;
        // 负数1开头, 最大值 -1
        i = 0xffff_ffff;
        // 正数负数关系, 一个数的取反+1正好是这个数的相反数

        
        // 二进制 十六进制
        i = 0B000000000_000000000_000000000_000001111;
        i = 0x0000_000f;

        // 常用特殊值
        // 二进制最大值, +2147483647
        i = 0B01111111_11111111_11111111_11111111;
        i = 0x7fff_ffff;
        // 二进制 -2147483648, 正值最大值+1
        i = 0B10000000_00000000_00000000_00000000;
        i = 0x8000_0000;
        // 二进制, 0
        i = 0B00000000_00000000_00000000_00000000;
        i = 0x0000_0000;
        // 二进制, 1
        i = 0B00000000_00000000_00000000_00000001;
        i = 0x0000_0001;
        // 二进制, 1431655765
        i = 0B01010101_01010101_01010101_01010101;
        i = 0x5555_5555;
        // 二进制, -1431655766
        i = 0B10101010_10101010_10101010_10101010;
        i = 0xaaaa_aaaa;
        // 二进制, 858993459
        i = 0B00110011_00110011_00110011_00110011;
        i = 0x3333_3333;
        // 二进制, -858993460
        i = 0B11001100_11001100_11001100_11001100;
        i = 0xcccc_cccc;
        // 二进制, 252645135
        i = 0B00001111_00001111_00001111_00001111;
        i = 0x0f0f_0f0f;
        // 二进制, -252645136
        i = 0B11110000_11110000_11110000_11110000;
        i = 0xf0f0_f0f0;
        // 二进制, 65535
        i = 0B00000000_00000000_11111111_11111111;
        i = 0x0000_ffff;
        // 二进制, -65536
        i = 0B11111111_11111111_00000000_00000000;
        i = 0xffff_0000;

        // 二进制打印输出
        Integer.toHexString(1);
        Long.toHexString(1L);
        BinaryUtils.binaryPretty(1);

    }

    /**
     * 8进制展示并不直观, 也并不常用, 所以不建议使用
     */
    @Test
    public void octal_01_base() {
        int a2 = 03;// 定义八进制0开头
        System.out.println(Integer.toOctalString(16));// 八进制输出
    }

}